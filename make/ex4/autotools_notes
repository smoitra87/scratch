Requirements:
-------------
This program requires devel libraries of xosd, X11 and an X11 extension called Xtst.

Generating configure script:
----------------------------
1. Leave the default Makefile in the project folder and run autoscan.
   It will create a file named configure.scan.

2. Now move the Makefile to a different place (so it doesn't interfere with the autogenerated files in future). 

   mv Makefile ../.

3. Rename configure.scan to configure.ac (this used to be configure.in for old versions, configure.in is
   deprecated now).

4. Edit configure.ac and modify these lines.

WAS:

AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])

IS:

AC_INIT([getkey], [0.1], [email-address])

WAS:
# FIXME: Replace `main' with a function in `-lX11':
AC_CHECK_LIB([X11], [main])
# FIXME: Replace `main' with a function in `-lXtst':
AC_CHECK_LIB([Xtst], [main])
# FIXME: Replace `main' with a function in `-lxosd':
AC_CHECK_LIB([xosd], [main])

I chose one function from each of the libraries I used in my program and replaced the word main with the
function name. Any one function is enough to verify a library.

IS:
AC_CHECK_LIB([X11], [XOpenDisplay], [],[
			  echo "X11 library is required for this program" 
			  exit -1])
AC_CHECK_LIB([Xtst], [XRecordCreateContext], [],[
			  echo "Xtst devel library is missing. Xtst is required for this program" 
			  exit -1])
AC_CHECK_LIB([xosd], [xosd_create], [],[
			  echo "xosd devel library is missing. xosd is required for this program"
			  exit -1])

SYNTAX:

 AC_CHECK_LIB([libname],[func-name],[action-if-found],[action-if-not-found])

The line breaks are essential in the fourth parameter to the function AC_CHECK_LIB().
This is to make sure that configure script will exit when it can't find a dependency.

5. Run autoconf. 

   autoconf

This will create the first version of configure script.

Generating Makefile:
--------------------

1. Create a file named Makefile.am and add these lines.

AUTOMAKE_OPTIONS = foreign

CFLAGS=-Wall -I/usr/local/include -DVERSION=\"$(VERSION)\" -DPROG="\"$(PACKAGE)\"" 
LDFLAGS=-L/usr/local/lib -lX11 -lXtst -lxosd

bin_PROGRAMS = getkey
getkey_SOURCES = getkey.c circ_list.c

The first line AUTOMAKE_OPTIONS = foreign is to let automake know that it is not a standard GNU package.
A standard GNU package requires certain folders and files to be present, such as doc, src, INSTALL, COPYING,
etc.

The CFLAGS and LDFLAGS is copied from the current Makefile that we moved to a different location.
bin_PROGRAMS = getkey is the name of the resulting executable. 
getkey_SOURCES = getkey.c circ_list.c, this is the list of sources that will compile to result in getkey.

if you have more than one resulting executable you can do 

bin_PROGRAMS = prog1 prog2 prog3

prog1_SOURCE = src1 src2 
prog2_SOURCE = src2 src3
prog3_SOURCE = src4 src5
....

2. Finally add this line to the configure.ac.

AM_INIT_AUTOMAKE([getkey], [0.1])

This instructs automake to generate a makefile after the configure script is run.
This will also define two constants PACKAGE(=getkey) and VERSION(=0.1) during make. This can be used in the code to 
display version specific print outs.

3. For our grand finale we run these commands

aclocal
autoconf
automake -a

Now we have the configure script ready to go. 

4. Test it out

./configure
make

